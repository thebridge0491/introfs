namespace {{parentcap}}{{^parentcap}}Introfs{{/parentcap}}{{joiner}}{{^joiner}}.{{/joiner}}{{projectcap}}{{^projectcap}}Util{{/projectcap}}.Tests
    
open System
open Xunit
open FsCheck
open FsCheck.Xunit

open {{parentcap}}{{^parentcap}}Introfs{{/parentcap}}.{{projectcap}}{{^projectcap}}Util{{/projectcap}}

module TpClassic =
    
    let (modNm, epsilon) = ("TpClassic", 0.001)
    let curry f a b = f(a, b)
    
    [<Property(MaxTest = 20, Verbose = true)>] [<Trait("Category", "Tag3")>]
    let ``factProp`` (x: uint32) =
        let n = (int64 x) % 19L + 1L in
        let ans = Seq.fold (fun acc e -> acc * e) 1L [1L .. n] in
        Seq.fold (fun acc fn -> acc && ans.Equals (fn n)) true
            [Classic.factLp; Classic.factI]
    
    [<Property>] [<Trait("Category", "Tag3")>]
    let ``exptProp`` (x: uint32) (y: uint32) =
        let (b, n) = (float32 <| (int x) % 19 + 1, float32 <| (int y) % 10 + 1) in
        let ans = float <| b ** n in
        Seq.fold (fun acc fn -> 
                acc && 
                (Library.inEpsilon (epsilon * ans) ans (float <| fn b n))) true
            [Classic.exptLp; Classic.exptI]
